import cssutils
from pathlib import Path
import re

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥
cssutils.log.setLevel(50)

# –¢–∏–ø—ã –ø—Ä–∞–≤–∏–ª
STYLE_RULE = 1      # .class { ... }
IMPORT_RULE = 3     # @import
KEYFRAMES_RULE = 7  # @keyframes
MEDIA_RULE = 4      # @media


def format_css_rule(rule, indent="    "):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω–æ–µ CSS-–ø—Ä–∞–≤–∏–ª–æ"""
    sel = rule.selectorText.strip()
    props = [f"{indent}{p.name}: {p.value};" for p in rule.style]
    if not props:
        return f"{sel} {{}}"
    return f"{sel} {{\n" + "\n".join(props) + "\n}"


def format_at_rule(rule, indent="    "):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç @-–ø—Ä–∞–≤–∏–ª–∞"""
    if rule.type == IMPORT_RULE:
        return f"@import url('{rule.href}');"
    elif rule.type == KEYFRAMES_RULE:
        frames = []
        for keyframe in rule:
            style_lines = [f"{indent * 2}{p.name}: {p.value};" for p in keyframe.style]
            frame_block = f"{indent}{keyframe.keyText} {{\n" + "\n".join(style_lines) + f"\n{indent}}}"
            frames.append(frame_block)
        return f"@keyframes {rule.name} {{\n" + "\n".join(frames) + "\n}"
    elif rule.type == MEDIA_RULE:
        query = rule.media.mediaText
        inner = []
        for r in rule:
            if hasattr(r, 'selectorText'):
                inner.append(f"{indent}{format_css_rule(r, indent * 2)}")
        return f"@media {query} {{\n" + "\n".join(inner) + "\n}"
    else:
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö @-–ø—Ä–∞–≤–∏–ª
        rule_text = rule.cssText if hasattr(rule, 'cssText') else str(rule)
        if '@charset' not in rule_text:
            return rule_text
        return ''

def get_rule_key(rule):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if rule.type == STYLE_RULE:
        # print(rule.selectorText)
        return f"style:{rule.selectorText.strip().lower()}"                                 
    elif rule.type == IMPORT_RULE:
        return f"import:{rule.href}"
    elif rule.type == KEYFRAMES_RULE:
        # –î–ª—è keyframes –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        frames_content = []
        for keyframe in rule:
            frame_props = [f"{p.name}:{p.value}" for p in keyframe.style]
            frames_content.append(f"{keyframe.keyText}:{';'.join(sorted(frame_props))}")
        return f"keyframes:{rule.name}:{':'.join(sorted(frames_content))}"
    elif rule.type == MEDIA_RULE:
        # –î–ª—è media –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        query = rule.media.mediaText
        inner_content = []
        for r in rule:
            if hasattr(r, 'selectorText'):
                props = [f"{p.name}:{p.value}" for p in r.style]
                inner_content.append(f"{r.selectorText}:{';'.join(sorted(props))}")
        return f"media:{query}:{':'.join(sorted(inner_content))}"
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–∞–≤–∏–ª –∏—Å–ø–æ–ª—å–∑—É–µ–º CSS —Ç–µ–∫—Å—Ç
        return f"other:{rule.cssText}"


def load_css_rules(css_text):
    """–ü–∞—Ä—Å–∏—Ç CSS –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏"""
    try:
        sheet = cssutils.parseString(css_text, encoding='utf-8')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSS: {e}")
        sheet = cssutils.parseString("")  # –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç

    rules_dict = {}  # –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª —Å –∫–ª—é—á–∞–º–∏
    rules_list = []  # –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞

    for rule in sheet:
        key = get_rule_key(rule)
        rules_dict[key] = rule
        rules_list.append((key, rule))

    return rules_dict, rules_list


def merge_inline_with_external(html_file, css_file):
    try:
        html_content = Path(html_file).read_text(encoding='utf-8')
        css_content = Path(css_file).read_text(encoding='utf-8')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        return

    print(f"üìÑ HTML: {html_file}")
    print(f"üé® CSS: {css_file}\n")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º <style> –∏–∑ HTML
    style_match = re.search(r'<style[^>]*>(.*?)</style>', html_content, re.DOTALL | re.IGNORECASE)
    inline_css = style_match.group(1).strip() if style_match else ""

    print("üîç –ü–∞—Ä—Å–∏–Ω–≥ CSS...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
    ext_rules, ext_list = load_css_rules(css_content)
    inline_rules, inline_list = load_css_rules(inline_css)

    print(f"   ‚úÖ –ò–∑ CSS-—Ñ–∞–π–ª–∞: {len(ext_rules)} –ø—Ä–∞–≤–∏–ª")
    print(f"   ‚úÖ –ò–∑ <style>: {len(inline_rules)} –ø—Ä–∞–≤–∏–ª")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º: –≤–Ω–µ—à–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã
    final_rules = ext_rules.copy()
    new_from_inline = 0

    for key, rule in inline_rules.items():
        if key not in final_rules:
            final_rules[key] = rule
            new_from_inline += 1

    print(f"   üîÑ –ò—Ç–æ–≥–æ: {len(final_rules)} –ø—Ä–∞–≤–∏–ª (+{new_from_inline} –Ω–æ–≤—ã—Ö)\n")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π CSS, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
    lines = []
    processed_keys = set()

    # 1. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ CSS –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    for key, rule in ext_list:
        if key in processed_keys:
            continue
            
        if rule.type == IMPORT_RULE:
            lines.append(format_at_rule(rule))
        elif rule.type == STYLE_RULE:
            lines.append(format_css_rule(rule))
        else:
            lines.append(format_at_rule(rule, indent="    "))
        
        processed_keys.add(key)

    # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ inline CSS
    # if new_from_inline > 0:
        # lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        # lines.append("/* –ü—Ä–∞–≤–∏–ª–∞ –∏–∑ <style> */")
        
        for key, rule in inline_list:
            if key not in processed_keys:
                if rule.type == IMPORT_RULE:
                    lines.append(format_at_rule(rule))
                elif rule.type == STYLE_RULE:
                    lines.append(format_css_rule(rule))
                else:
                    lines.append(format_at_rule(rule, indent="    "))
                
                processed_keys.add(key)

    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
    final_css = "\n".join(lines).strip()

    # –í—ã–≤–æ–¥
    print("=" * 60)
    print("‚ú® –ò–¢–û–ì–û–í–´–ô –¢–ï–ì <style>")
    print("=" * 60)
    print(f"<style>\n{final_css}\n</style>")
    print("=" * 60)


# ========================
#   –¢–û–ß–ö–ê –í–•–û–î–ê
# ========================
if __name__ == "__main__":
    html_file = "index.html"   # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
    css_file = "rep.css"    # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
    merge_inline_with_external(html_file, css_file)
